// CONSTANTS
// *****************************************************************************

var tTableStartPerformance = performance.now();

const table = $('#orgs');

//variable names for table columns
const tableCols = [
    "entity_name",
    "entity_category", //Organization type
    "primary_focus",
    "state",
    "collaboration_links" //collaboration_name", 
    //"keyword"
];

//Displayed in the createTableHeader() function
const tableColumnTitles = [
    "Organization Name",
    "Organization Type",
    "Focus",
    "State",
    "Collaboration Membership"
    //"Keyword"
];

_data = {};
// make sure that _data is not from other databases (collaboration or publications)
sessionStorage.clear();

// INIT ******************************************
getFirebaseOrganizationData();
//This line creates a mobile header for the table, the static header in
//  index.js makes this line unnecessary.
//createTableHeader();

// SEARCH TEXT BOX CHANGE
$(".filter").keypress(function(e) {
    if (e.which == 13) {
        refreshTableData();
    }
});

and_functionality = true;

// Toggle the and/or behavior of the search, console logging is for consistency with past versions
function andOrToggle(buttonId) {
    and_functionality = !and_functionality;
    console.log('this is ' + and_functionality);
    document.getElementById(buttonId).disabled = true;
    if (buttonId == 'AndButton') {
        document.getElementById('OrButton').disabled = false;  
        document.getElementById('OrButton').innerText = 'Collaboration Or Search';
        document.getElementById('AndButton').innerText = 'Collaboration And Search - ACTIVE';              
    } else {
        document.getElementById('AndButton').disabled = false;
        document.getElementById('OrButton').innerText = 'Collaboration Or Search - ACTIVE';
        document.getElementById('AndButton').innerText = 'Collaboration And Search';
    }
}

var titles = document.getElementsByTagName("th"); 

// Automatically labels headers, not needed with index.html static header
for ( var i = 0, len = titles.length; i < len; i++ ) { 
    var title = document.getElementById(i);
    console.log(title)
    title.onclick = function(){
        sortTable($(title).attr('id'), asc);
    }
    //titles[i].addEventListener("click", console.log('this worked?'));  
}

// Displays the table
function hydrateView() {
    console.log('hydrateView');
    loadSearchFilters();
    refreshTableData();
}

// Gets filters for table data sorting
function getSelectedTableFilters() {
    console.log('getSelectedTableFilters');
    var filters = [];
    for (var index in tableCols) {
        var selectedValues = $('select#' + tableCols[index]).val();
        if (selectedValues && selectedValues.length > 0) {
            filters[index] = selectedValues;
        }
    }
    return filters;
}

// retains records from _data that fulfill the selected filters
function filterData(filters) {
    console.log('filterData');
    var filteredRecords = {};
    
    // if any filters are selected, loop through the data and filter
    if (filters) {
        for (var key in _data['entity']) {
            var row = _data['entity'][key];
            // Check filters
            if (row['entity_type'] == 'organization') {
                var addToDisplay = true;
            }

            var collabs = '';
            for (var k in _data['entity-membership']) {
                for (var k2 in _data['entity-membership'][k]){
                    if (_data['entity-membership'][k][k2] == key) {
                        var name = _data['entity'][k]['entity_name'];
                        collabs += name + '|' + k + '||';
                    }
                }
            }
            
            // loop over every key in filters dictionary, since different categories have different behaviors
            for (var i in filters) {
                // check for and/or functionality
                if (!and_functionality) {
                    console.log('this is false');
                    // only filter if any filters are selected for this table header category
                    if (filters[i] && filters[i].length > 0) {
                        // check if any of the filters selected matches the record field
                        var match = row[tableCols[i]].trim();
                        var result = (filters[i].includes(match));
                        
                        // for collaborations: see if any selected filters show up in the organization's list of collaborations
                        for (var j in filters[i]) {
                            if (tableCols[i] == 'collaboration_links') {
                                if (collabs.includes(filters[i][j])) {
                                    result = true;
                                    break
                                }
                            } else if (match.includes(filters[i][j])) {
                                result = true;
                                break
                            }
                        }
                        
                        // don't add a record twice; may be obsolete since the first loop traverses every data record
                        if (result === false) {
                            addToDisplay = false;
                            break;
                        }
                    }
                    
                // and functionality
                } else {
                    console.log('this is true');
                    // only filter if any filters are selected for this table header category                    
                    if (filters[i] && filters[i].length > 0) {
                        var match = row[tableCols[i]].trim();
                        // filter out records where none of the filters are matched
                        var result = (filters[i].includes(match));
                        
                        // set default result to true for collaboration_links
                        // note: collaboration_links are different because an organization could have more than one collaboration link; the filters may not include all of the links for at least one to match
                        if (tableCols[i] == 'collaboration_links') {
                            var result = true;
                        }
                        
                        // loop over all filters in a certain table header category
                        for (var j in filters[i]) {
                            // for collaboration links, check if the record field has every collboration filtered
                            if (tableCols[i] == 'collaboration_links') {
                                if (!collabs.includes(filters[i][j])) {
                                    result = false;
                                    break;
                                }   
                            // for anything else, check if the specific filter is in the record; no need for and functionality for these
                            } else if (match.includes(filters[i][j])) {
                                    result = true;
                                    break
                            }
                        }

                        // prevent duplicate addition of record; may be redundant
                        if (result === false) {
                            addToDisplay = false;
                            break;
                        }
                    }
                }
            }

            if (addToDisplay && row['entity_type'] == 'organization') {
                filteredRecords[key] = row;
                filteredRecords[key]['collaboration_links'] = collabs.substr(0, collabs.length - 2);
            }
        }
    }
    return filteredRecords;
}
// LOAD TABLE
// *****************************************************************************

// This function used to take a query parameter, which was the value in a filter box.
function refreshTableData() {
    console.log('refreshTableData');
    // Filter data on query, show first 10.

    // clears table
    $("#atlas tbody tr").remove();

    var filters = getSelectedTableFilters();
    var recordsToDisplay = filterData(filters);

    createTableBody(recordsToDisplay);

    jQuery(document).ready(function($) {

        var tEnd = performance.now();
        console.log("from start to ready took " + (tEnd - tTableStartPerformance) + " milliseconds.")
        //$('#atlas').DataTable( {
          //  dom: 'Bfrtip',
            //buttons: [
              //  'excel', 'pdf'
           // ]
        //} );
    });

}

// Adds all records to the table, counts how many there are, and displays the appropriate message
function createTableBody(list) {
    console.log('createTableBody');
    // Add the header first
    //  console.log(list);
    var count = 0;
    for (var pos in list) {
        // Adds each member of the list to the end of the table
        table.find('tbody:last').append(createTableRow(pos, list[pos]));
        ++count;
    }
    var msg = " non-governmental organizations, businesses, and universities match these search results. See ";
    msg += '<a target="_top" href="http://www.sciencepolicyatlas.com/" style = "color: #ffffff">' + "tips" + "</a>";
    msg += " for leveraging the Atlas.";
    if(count === 1) {
        msg = " non-governmental organization, business, or university matches these search results. See" + '<a target="_top" href="http://www.sciencepolicyatlas.com/" style = "color: #ffffff">' + "tips" + "</a>" + "for leveraging the Atlas.";
    }
    $('#row-count').html(count + msg);  
}

// create the html code for displaying the table row for an individual record
function createTableRow(id, org) {
    console.log('createTableRow');

    var string = "<tr id='" + id + "'>";
    for (var i in tableCols) {
        var column = tableCols[i];

        string += "<td class=" + column + ">";

        // CHANGE
        if (column == "collaboration_links") { //collaboration_name") {
            var collabs = org.collaboration_links ? org.collaboration_links.split("||") : "";
            
            // work with collaboration link format to present names of collaborations with links to collaboration profiles
            for (var i in collabs) {
                if (i > 0) {
                    string += ', ';
                }

                var collab = collabs[i];

                var collab_key = collab ? collab.split("|") : "";

                var k = collab_key[1];
                var name = collab_key[0];
                k = k.trim();
                name = name.trim();
                string += "<a target=\"_top\" href=\"http://www.sciencepolicyatlas.com/collaboration?collab=" + k + "\">" + name + "</a>";
            }
        // add hyperlink to organization profile
        } else if (column == 'entity_name') {
            string += "<a target=\"_top\" href=\"http://www.sciencepolicyatlas.com/organization?org=" + id + "\">" + org[column] + "</a>";
        }
        else if (column == 'entity_category' && org[column].toLowerCase() == 'ngo') {
            string += org['entity_category_info']
        }
        else {
            string += org[column];
        }
        string += "</td>\n";
    }
    return string;
}

// Currently unused
/*
function createTableHeader() {
    console.log('createTableHeader');
    var string = "<tr>";
    for (var i = 0; i < tableColumnTitles.length; i++) {
        string += "<th id=" + i + ">" + tableColumnTitles[i] + "</th>";
    }
    string += "</tr>";
    table.find('thead').append(string);
}
*/

// TODO: comment these three functions
function getsessionStorage() {
    var d = sessionStorage.getItem('data');
    var data = JSON.parse(d);
    return data;
}

function setsessionStorage(data) {
    if (data) {
        var dataToStore = JSON.stringify(data);
        sessionStorage.setItem('data', dataToStore);
    }
}

// retrieve all organization data from firebase; set _data variable
function getFirebaseOrganizationData() {
    var tTableStartPerformance = performance.now();
    var sData = getsessionStorage();
    if (sData) {
        _data = sData;
        hydrateView();

        var pn = performance.now();
        console.log("hydrateView using session data took " + (pn - tTableStartPerformance) + " milliseconds.")
        return;
    }

    console.log('getFirebaseOrganizationData');
    $.ajax({
        type: "GET",
        dataType: "jsonp",
        url: "https://atlas-769c1.firebaseio.com/.json",
        success: function(data) {
            _data = data;
            var tEnd = performance.now();
            console.log("getFirebaseOrganizationData took " + (tEnd - tTableStartPerformance) + " milliseconds.")
            hydrateView();
            var tEnd2 = performance.now();
            console.log("hydrateView took " + (tEnd2 - tEnd) + " milliseconds.")
            setsessionStorage(_data);
        }
    });
}

// LOAD TABLE
// *****************************************************************************

// Creates filter boxes for UI
function loadSearchFilters() {
    console.log('loadSearchFilters');
    // Create filters for data from table
    for (var i in tableCols) {
        createFilterFor(tableCols[i], i);
    }
    // Using string-building for the button for the sake of consistency
    // createFilter uses this same method
    var string = '<button class = "filterButton" id="AndButton" \
        onclick = "andOrToggle("AndButton"); refreshTableData();">';
    string += 'Collaboration And Search';
    string += '</button>';

    string += '<button class = "filterButton" id="OrButton" disabled = true \
        onclick = "andOrToggle("OrButton"); refreshTableData();">';
    string += 'Collaboration Or Search - ACTIVE';
    string += '</button>';
    $("#options").append(string);

    // Whenever the dropdown menus change, update the table
    $(".chosen-select").chosen().change(function(evt, params) {
        refreshTableData();
    });
}

// sort the data records by alphanumerical order (in order or reverse order)
function asc(s1, s2) {
    var s1lower = s1.toLowerCase();
    var s2lower = s2.toLowerCase();
    return s1lower > s2lower ? 1 : (s1lower < s2lower ? -1 : 0);
}

function desc(s1, s2) {
    var s1lower = s1.toLowerCase();
    var s2lower = s2.toLowerCase();
    return s1lower < s2lower ? 1 : (s1lower > s2lower ? -1 : 0);
}

// TODO: comment this function
function sortTable(col,dir){
    console.log(col);
    var rows = $('#livefeeds tbody  tr').removeClass('row_alt').get();
    var t=1;
    if(!dir || dir=='dec') {
        t=-1;
    } else if(dir=='asc') {
        t=1;
    }
    rows.sort(function(a, b) {
        var A = $(a).children('td').eq(col).text().toUpperCase();
        var B = $(b).children('td').eq(col).text().toUpperCase();
        if(A <b> B) {
            return t;
        }
        return 0;
    });
    $.each(rows, function(index, row) {
        $('#livefeeds').children('tbody').append(row);
        if( index%2 == 1){
            $(row).addClass('row_alt');
        }
    });
}

// fill in the different filter categories based on what elements show up in the data
function createFilterFor(key, index) {
    console.log('createFilterFor');
    // dictionary of filters; keys are data field names, and values are all the different values for the field name
    var options = [];
    var values = [];
    // Build list of filter options from organization attributes
    if (key === 'collaboration_links') {
        for (c_key in _data['entity-membership']) {
            name = _data['entity'][c_key]['entity_name'];
            values.push(name);
        }
        
        // Prepare filter options to be displayed: trim org keys and remove duplicates
        if (values.length > 0) {
            for (var n in values) {
                var value = values[n];
                value = value.trim();
                
                // already in filter?
                if ($.inArray(value, options) === -1) {
                    options.push(value);
                }
            }
        }
    } else if (key === 'primary_focus') {
        value = 'placeholder';
    } else {
        for (var org in _data['entity']) {
            var value = '';
            if (_data['entity'][org]['entity_type'] === 'organization') {
                value = _data['entity'][org][key];
            }
            
            // remove extraneous NGO categories meant for internal documentation
            if (value.substr(0, 3) == 'NGO' && (value[6].toLowerCase() == 'i' || value[6].toLowerCase() == 'n')) {
                console.log('take out NGO record');
                value = '';
            }

            // Prepare filter options to be displayed: trim org keys and remove duplicates
            if (value.length > 0) {
                // already in filter?
                if ($.inArray(value, options) === -1) {
                    options.push(value);
                }
            }
        }
    }

    // sort possible filters by alphanumerical order
    options.sort(asc);

    // add html scripts for each filter
    var string = '<select id="' + key + '" class="chosen-select" multiple="' + options.length + '">';
    if (key === 'organization_category') {
        string = '<select id="' + key + '" class="chosen-select" multiple="' + options.length + '" data-placeholder="Organization type">';
    }
    for (var i = 0; i < options.length; i++) {
        string += '<option value="' + options[i] + '">' + options[i] + '</option>';
    }
    string += '</select>';
    $("#options").append(string);

    var placeHolder = tableColumnTitles[index];

    $("#" + key).chosen({
        no_results_text: "Oops, nothing found!",
        width: "90%",
        allow_single_deselect: true,
        placeholder_text_multiple: placeHolder,
    });
    
    // remove NGO from filters
    $("#organization_category option[value='Ngo']").remove();
    $("#organization_category option[value='ngo']").remove();

}

// create keyword search box that is only a text box and does not contain options
function createKeywordFilterFor(index){
    console.log('createKeywordFilterFor');
    $("#keyword input").prop('disabled', false);
}
