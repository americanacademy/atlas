// CONSTANTS
// *****************************************************************************

var tTableStartPerformance = performance.now();

const table = $('#orgs');

//variable names for table columns
const tableCols = [
    "organization_name",
    "state",
    "collaboration_links", //collaboration_name", 
    "organization_category" //Organization type
];

//Displayed in the createTableHeader() function
const tableColumnTitles = [
    "Organizations",
    "State",
    "Participation in Collaboration",
    "Organization Type"
];

_data = {};
sessionStorage.clear();

// INIT ******************************************
getFirebaseOrganizationData();
//This line creates a mobile header for the table, the static header in
//  index.js makes this line unnecessary.
//createTableHeader();

// SEARCH TEXT BOX CHANGE
$(".filter").keypress(function(e) {
    if (e.which == 13) {
        refreshTableData();
    }
});

and_functionality = true;

// Toggle the and/or behavior of the search, console logging is for consistency with past versions
function andOrToggle() {
    and_functionality = !and_functionality;
    console.log('this is ' + and_functionality);
}


// Check current and functionality and change button text to reflect.
function andOrTextToggle(buttonId) {
    if (and_functionality){
        document.getElementById(buttonId).innerText = "Collaboration And Search";
    }
    else{
        document.getElementById(buttonId).innerText = "Collaboration Or Search";
    }
}

var titles = document.getElementsByTagName("th"); 

// Automatically labels headers, not needed with index.html static header
for ( var i = 0, len = titles.length; i < len; i++ ) { 
    var title = document.getElementById(i);
    console.log(title)
    title.onclick = function(){
        sortTable($(title).attr('id'), asc);
    }
    //titles[i].addEventListener("click", console.log('this worked?'));  
}

// Displays the table
function hydrateView() {
    console.log('hydrateView');
    loadSearchFilters();
    refreshTableData();
}

// Gets filters for table data sorting
function getSelectedTableFilters() {
    console.log('getSelectedTableFilters');
    var filters = [];
    for (var index in tableCols) {
        var selectedValues = $('select#' + tableCols[index]).val();
        if (selectedValues && selectedValues.length > 0) {
            filters[index] = selectedValues;
        }
    }
    return filters;
}

// TODO: comment this function
function filterData(filters) {
    console.log('filterData');
    var filteredRecords = {};

    if (filters) {
        for (var key in _data) {
            var row = _data[key];
            // Check filters
            var addToDisplay = true;
            for (var i in filters) {
                if (!and_functionality) {
                    console.log('this is false');
                    if (filters[i] && filters[i].length > 0) {
                        var result = (filters[i].includes(row[tableCols[i]]));
                        for (var j in filters[i]) {
                            if (row[tableCols[i]].includes(filters[i][j])) {
                                console.log((row[tableCols[i]], filters[i][j]))
                                result = true;
                                break
                            }
                        }
                        if (tableCols[i] == 'organization_category' && row[tableCols[i]].includes('Ngo')) {
                            var result = (filters[i].includes(row['nonprofit_status']));
                        }
                        if (result === false) {
                            addToDisplay = false;
                            break;
                        }
                    }
                } else {
                    console.log('this is true');
                    if (filters[i] && filters[i].length > 0) {
                        var result = (filters[i].includes(row[tableCols[i]]));
                        if (tableCols[i] == 'collaboration_links') {
                            var result = true;
                        }
                        for (var j in filters[i]) {
                            if (tableCols[i] == 'collaboration_links') {
                                if (!row[tableCols[i]].includes(filters[i][j])) {
                                    console.log(row[tableCols[i]])
                                    result = false;
                                    break;
                                }   
                            } else if (!tableCols[i] == 'organization_category') {
                                if (row[tableCols[i]].includes(filters[i][j])) {
                                    console.log((row[tableCols[i]], filters[i][j]))
                                    result = true;
                                    break
                                }
                            }

                        }
                        if (tableCols[i] == 'organization_category' && row[tableCols[i]].includes('Ngo')) {
                            var result = (filters[i].includes(row['nonprofit_status']));
                        }
                        if (result === false) {
                            addToDisplay = false;
                            break;
                        }
                    }
                }
            }
            if (addToDisplay) {
                filteredRecords[key] = row;
            }
        }
    }
    return filteredRecords;
}
// LOAD TABLE
// *****************************************************************************

// This function used to take a query parameter, which was the value in a filter box.
function refreshTableData() {
    console.log('refreshTableData');
    // Filter data on query, show first 10.

    // clears table
    $("#atlas tbody tr").remove();

    var filters = getSelectedTableFilters();
    var recordsToDisplay = filterData(filters);

    createTableBody(recordsToDisplay);

    jQuery(document).ready(function($) {

        var tEnd = performance.now();
        console.log("from start to ready took " + (tEnd - tTableStartPerformance) + " milliseconds.")
    });
}

// Adds all records to the table, counts how many there are, and displays the appropriate message
function createTableBody(list) {
    console.log('createTableBody');
    // Add the header first
    //  console.log(list);
    var count = 0;
    for (var pos in list) {
        // Adds each member of the list to the end of the table
        table.find('tbody:last').append(createTableRow(pos, list[pos]));
        ++count;
    }
    var msg = " non-governmental organizations, businesses, and universities match these search results. See ";
    msg += '<a target="_top" href="http://www.sciencepolicyatlas.com/" style = "color: #ffffff">' + "tips" + "</a>";
    msg += " for leveraging the Atlas.";
    if(count === 1) {
        msg = " non-governmental organization, business, or university matches these search results. See" + '<a target="_top" href="http://www.sciencepolicyatlas.com/" style = "color: #ffffff">' + "tips" + "</a>" + "for leveraging the Atlas.";
    }
    $('#row-count').html(count + msg);  
}

// TODO: comment this function
function createTableRow(id, org) {
    console.log('createTableRow');

    var string = "<tr id='" + id + "'>";
    for (var i in tableCols) {
        var column = tableCols[i];

        string += "<td class=" + column + ">";
        if (column == "collaboration_links") { //collaboration_name") {
            var collabs = org.collaboration_links ? org.collaboration_links.split("||") : ""; //col].split(", ");

            for (var i in collabs) {

                var collab = collabs[i];

                var collab_key = collab ? collab.split(" | ") : "";
                for (kv in collab_key) {

                    if (i > 0) {
                        string += ", ";
                    }
                    var k = collab_key[1];
                    var name = collab_key[0];
                    k = k.trim();
                    name = name.trim();
                    string += "<a target=\"_top\" href=\"http://www.sciencepolicyatlas.com/collaboration?collab=" + k + "\">" + name + "</a>";
                    break;
                }
            }
        } else if (column == 'organization_name') {
            string += "<a target=\"_top\" href=\"http://www.sciencepolicyatlas.com/organization?org=" + id + "\">" + org[column] + "</a>";
        }
        else if (column == 'organization_category' && org[column] == 'Ngo') {
            string += org['nonprofit_status']
        }
        else {
            string += org[column];
        }
        string += "</td>\n";
    }
    return string;
}

// Currently unused
/*
function createTableHeader() {
    console.log('createTableHeader');
    var string = "<tr>";
    for (var i = 0; i < tableColumnTitles.length; i++) {
        string += "<th id=" + i + ">" + tableColumnTitles[i] + "</th>";
    }
    string += "</tr>";
    table.find('thead').append(string);
}
*/

// TODO: comment these three functions
function getsessionStorage() {
    var d = sessionStorage.getItem('data');
    var data = JSON.parse(d);
    return data;
}

function setsessionStorage(data) {
    if (data) {
        var dataToStore = JSON.stringify(data);
        sessionStorage.setItem('data', dataToStore);
    }
}

function getFirebaseOrganizationData() {
    var tTableStartPerformance = performance.now();
    var sData = getsessionStorage();
    if (sData) {
        _data = sData;
        hydrateView();

        var pn = performance.now();
        console.log("hydrateView using session data took " + (pn - tTableStartPerformance) + " milliseconds.")
        return;
    }

    console.log('getFirebaseOrganizationData');
    $.ajax({
        type: "GET",
        dataType: "jsonp",
        url: "https://atlas-new-format.firebaseio.com/organizations/.json",
        success: function(data) {
            _data = data;
            var tEnd = performance.now();
            console.log("getFirebaseOrganizationData took " + (tEnd - tTableStartPerformance) + " milliseconds.")
            hydrateView();
            var tEnd2 = performance.now();
            console.log("hydrateView took " + (tEnd2 - tEnd) + " milliseconds.")
            setsessionStorage(_data);
        }
    });
}

// LOAD TABLE
// *****************************************************************************

// Creates filter boxes for UI
function loadSearchFilters() {
    console.log('loadSearchFilters');
    // Create filters for data from table
    for (var i in tableCols) {
        createFilterFor(tableCols[i]);
    }
    // Using string-building for the button for the sake of consistency
    // createFilter uses this same method
    var string = '<button class = "filterButton" id="andOrButton" \
        onclick = "andOrToggle(); andOrTextToggle(this.id); refreshTableData();">';
    string += 'Collaboration And Search';
    string += '</button>';
    $("#options").append(string);

    // Whenever the dropdown menus change, update the table
    $(".chosen-select").chosen().change(function(evt, params) {
        refreshTableData();
    });
}

// These functions don't seem to be used, but removing them breaks everything
function asc(s1, s2) {
    var s1lower = s1.toLowerCase();
    var s2lower = s2.toLowerCase();
    return s1lower > s2lower ? 1 : (s1lower < s2lower ? -1 : 0);
}

function desc(s1, s2) {
    var s1lower = s1.toLowerCase();
    var s2lower = s2.toLowerCase();
    return s1lower < s2lower ? 1 : (s1lower > s2lower ? -1 : 0);
}

// TODO: comment this function
function sortTable(col,dir){
    console.log(col);
    var rows = $('#livefeeds tbody  tr').removeClass('row_alt').get();
    var t=1;
    if(!dir || dir=='dec') {
        t=-1;
    } else if(dir=='asc') {
        t=1;
    }
    rows.sort(function(a, b) {
        var A = $(a).children('td').eq(col).text().toUpperCase();
        var B = $(b).children('td').eq(col).text().toUpperCase();
        if(A <b> B) {
            return t;
        }
        return 0;
    });
    $.each(rows, function(index, row) {
        $('#livefeeds').children('tbody').append(row);
        if( index%2 == 1){
            $(row).addClass('row_alt');
        }
    });
}

// TODO: complete commenting this function.
function createFilterFor(key) {
    console.log('createFilterFor');
    var options = [];
    // Build list of filter options from organization attributes
    for (var org in _data) {

        // multiple collaborations on one line comma delimited
        if (key === 'collaboration_links'){
           var values = _data[org][key].split(", ")
        } else {
            var values = [_data[org][key]]
        }

        // Prepare filter options to be displayed: trim org keys and remove duplicates
        if (values.length > 0) {
            for (var n in values) {
                var value = values[n];
                value = value.trim();

                // collaborations have a key, don't display it
                if (value.indexOf('|') > -1) {
                    value = value.substr(0, value.indexOf('|'));
                }
                // already in filter?
                if ($.inArray(value, options) === -1) {
                    options.push(value);
                }
            }
        }
    }
    // TODO: Why are these being added manually?
    if (key === 'organization_category') {
        //options.remove('Ngo');
        options.push('501(c)(3)', '501(c)(4)', '501(c)(5)', '501(c)(6)');
    }
    //
    if (key === 'collaboration_links') {
        options.sort(desc);
    } else {
        options.sort(asc);
    }

    var string = '<select id="' + key + '" class="chosen-select" multiple="' + options.length + '">';
    if (key === 'organization_category') {
        string = '<select id="' + key + '" class="chosen-select" multiple="' + options.length + '" data-placeholder="Organization type">';
    }
    for (var i = 0; i < options.length; i++) {
        if (options[i] === 'Ngo') {
        } else {
        string += '<option value="' + options[i] + '">' + options[i] + '</option>';
        }
    }
    string += '</select>';
    $("#options").append(string);

    var l = key.indexOf('_') > -1 ? key.indexOf('_') : key.length;
    var placeHolder = key.substr(0, l);

    placeHolder = placeHolder.charAt(0).toUpperCase() + placeHolder.substr(1);

    $("#" + key).chosen({
        no_results_text: "Oops, nothing found!",
        width: "90%",
        allow_single_deselect: true,
        placeholder_text_multiple: placeHolder,
    });

    $("#organization_category option[value='Ngo']").remove();

}
